# see https://jfrog.com/help/r/jfrog-release-information/artifactory-release-notes
# see https://jfrog.com/community/download-artifactory-oss/
# see templates/docker-compose-volumes.yaml in the downloaded file from the previous link.
# see docker compose exec -u root artifactory bash -c 'cat /var/opt/jfrog/artifactory/log/tomcat/tomcat-*.log'
services:
  artifactory:
    image: releases-docker.jfrog.io/jfrog/artifactory-oss:7.117.14
    ports:
      - 8082:8082
    environment:
      - ENABLE_MIGRATION=y
      - JF_SHARED_DATABASE_TYPE=postgresql
      - JF_SHARED_DATABASE_USERNAME=artifactory
      - JF_SHARED_DATABASE_PASSWORD=password
      - JF_SHARED_DATABASE_URL=jdbc:postgresql://postgres:5432/artifactory
      - JF_SHARED_DATABASE_DRIVER=org.postgresql.Driver
      - JF_ROUTER_ENTRYPOINTS_EXTERNALPORT=8082
      - TZ=Europe/Lisbon
    volumes:
      - artifactory_data:/var/opt/jfrog/artifactory
      - /usr/share/zoneinfo/Europe/Lisbon:/etc/localtime:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/artifactory/api/system/ping || exit 1"]
      start_period: 3m
      start_interval: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    # see https://hub.docker.com/_/postgres
    # see https://github.com/docker-library/postgres/tree/master/17/bookworm
    image: postgres:17.6-trixie
    environment:
      - POSTGRES_DB=artifactory
      - POSTGRES_USER=artifactory
      - POSTGRES_PASSWORD=password
      - TZ=Europe/Lisbon
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /usr/share/zoneinfo/Europe/Lisbon:/etc/localtime:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U artifactory"]
      start_period: 1m
      start_interval: 15s
      interval: 30s
      timeout: 10s
      retries: 5
    restart: on-failure
  init:
    build: init
    depends_on:
      artifactory:
        condition: service_healthy
    environment:
      - TZ=Europe/Lisbon
    volumes:
      - ./init:/init:ro
      - /usr/share/zoneinfo/Europe/Lisbon:/etc/localtime:ro
  wait:
    depends_on:
      init:
        condition: service_completed_successfully
    build: init
    command: ["true"]
  tests:
    profiles:
      - test
    build: init
    command: ["python3", "/init/artifactory_encode_props_tests.py"]
    environment:
      - TZ=Europe/Lisbon
    volumes:
      - ./init:/init:ro
      - /usr/share/zoneinfo/Europe/Lisbon:/etc/localtime:ro
volumes:
  artifactory_data:
  postgres_data:
